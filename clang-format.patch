Index: docs/ClangFormatStyleOptions.rst
===================================================================
--- docs/ClangFormatStyleOptions.rst	(revision 240315)
+++ docs/ClangFormatStyleOptions.rst	(working copy)
@@ -277,6 +277,8 @@
     braces of control statements, not to those of class, function
     or other definitions.
 
+**BreakBeforeElse** (``bool``)
+  If ``true``, will place a break before 'else', like ``Stroustrup``.
 
 **BreakBeforeTernaryOperators** (``bool``)
   If ``true``, ternary operators will be placed after line breaks.
@@ -410,6 +412,10 @@
   Add a space after ``@property`` in Objective-C, i.e. use
   ``\@property (readonly)`` instead of ``\@property(readonly)``.
 
+**ObjCSpaceBeforeMethodDeclaration** (``bool``)
+  Add a space before an Objective-C method declaration, i.e. use
+  ``- (void) method`` instead of ``- (void)method``.
+
 **ObjCSpaceBeforeProtocolList** (``bool``)
   Add a space in front of an Objective-C protocol list, i.e. use
   ``Foo <Protocol>`` instead of ``Foo<Protocol>``.
Index: include/clang/Format/Format.h
===================================================================
--- include/clang/Format/Format.h	(revision 240315)
+++ include/clang/Format/Format.h	(working copy)
@@ -226,6 +226,10 @@
   /// <tt>\@property (readonly)</tt> instead of <tt>\@property(readonly)</tt>.
   bool ObjCSpaceAfterProperty;
 
+  /// \brief Add a space before an Objective-C method declaration, i.e. use
+  /// <tt>- (void) method</tt> instead of <tt>- (void)method</tt>.
+  bool ObjCSpaceBeforeMethodDeclaration;
+
   /// \brief Add a space in front of an Objective-C protocol list, i.e. use
   /// <tt>Foo <Protocol></tt> instead of \c Foo<Protocol>.
   bool ObjCSpaceBeforeProtocolList;
@@ -344,6 +348,9 @@
   /// \brief The brace breaking style to use.
   BraceBreakingStyle BreakBeforeBraces;
 
+  /// \brief If \c true, will place a break before 'else', like \c Stroustrup.
+  bool BreakBeforeElse;
+
   /// \brief If \c true, format braced lists as best suited for C++11 braced
   /// lists.
   ///
@@ -449,6 +456,7 @@
            BreakBeforeBinaryOperators == R.BreakBeforeBinaryOperators &&
            BreakBeforeTernaryOperators == R.BreakBeforeTernaryOperators &&
            BreakBeforeBraces == R.BreakBeforeBraces &&
+           BreakBeforeElse == R.BreakBeforeElse &&
            BreakConstructorInitializersBeforeComma ==
                R.BreakConstructorInitializersBeforeComma &&
            ColumnLimit == R.ColumnLimit &&
@@ -468,6 +476,7 @@
            NamespaceIndentation == R.NamespaceIndentation &&
            ObjCBlockIndentWidth == R.ObjCBlockIndentWidth &&
            ObjCSpaceAfterProperty == R.ObjCSpaceAfterProperty &&
+           ObjCSpaceBeforeMethodDeclaration == R.ObjCSpaceBeforeMethodDeclaration &&
            ObjCSpaceBeforeProtocolList == R.ObjCSpaceBeforeProtocolList &&
            PenaltyBreakComment == R.PenaltyBreakComment &&
            PenaltyBreakFirstLessLess == R.PenaltyBreakFirstLessLess &&
Index: lib/Format/Format.cpp
===================================================================
--- lib/Format/Format.cpp	(revision 240315)
+++ lib/Format/Format.cpp	(working copy)
@@ -196,6 +196,7 @@
                    Style.AlwaysBreakBeforeMultilineStrings);
     IO.mapOptional("BreakBeforeBinaryOperators",
                    Style.BreakBeforeBinaryOperators);
+    IO.mapOptional("BreakBeforeElse", Style.BreakBeforeElse);
     IO.mapOptional("BreakBeforeTernaryOperators",
                    Style.BreakBeforeTernaryOperators);
     IO.mapOptional("BreakConstructorInitializersBeforeComma",
@@ -221,6 +222,7 @@
     IO.mapOptional("NamespaceIndentation", Style.NamespaceIndentation);
     IO.mapOptional("ObjCBlockIndentWidth", Style.ObjCBlockIndentWidth);
     IO.mapOptional("ObjCSpaceAfterProperty", Style.ObjCSpaceAfterProperty);
+    IO.mapOptional("ObjCSpaceBeforeMethodDeclaration", Style.ObjCSpaceBeforeMethodDeclaration);
     IO.mapOptional("ObjCSpaceBeforeProtocolList",
                    Style.ObjCSpaceBeforeProtocolList);
     IO.mapOptional("PenaltyBreakBeforeFirstCallParameter",
@@ -344,6 +346,7 @@
   LLVMStyle.BinPackParameters = true;
   LLVMStyle.BinPackArguments = true;
   LLVMStyle.BreakBeforeBinaryOperators = FormatStyle::BOS_None;
+  LLVMStyle.BreakBeforeElse = false;
   LLVMStyle.BreakBeforeTernaryOperators = true;
   LLVMStyle.BreakBeforeBraces = FormatStyle::BS_Attach;
   LLVMStyle.BreakConstructorInitializersBeforeComma = false;
@@ -367,6 +370,7 @@
   LLVMStyle.NamespaceIndentation = FormatStyle::NI_None;
   LLVMStyle.ObjCBlockIndentWidth = 2;
   LLVMStyle.ObjCSpaceAfterProperty = false;
+  LLVMStyle.ObjCSpaceBeforeMethodDeclaration = false;
   LLVMStyle.ObjCSpaceBeforeProtocolList = true;
   LLVMStyle.PointerAlignment = FormatStyle::PAS_Right;
   LLVMStyle.SpacesBeforeTrailingComments = 1;
@@ -409,6 +413,7 @@
   GoogleStyle.IndentCaseLabels = true;
   GoogleStyle.KeepEmptyLinesAtTheStartOfBlocks = false;
   GoogleStyle.ObjCSpaceAfterProperty = false;
+  GoogleStyle.ObjCSpaceBeforeMethodDeclaration = false;
   GoogleStyle.ObjCSpaceBeforeProtocolList = false;
   GoogleStyle.PointerAlignment = FormatStyle::PAS_Left;
   GoogleStyle.SpacesBeforeTrailingComments = 2;
@@ -467,6 +472,7 @@
   MozillaStyle.DerivePointerAlignment = true;
   MozillaStyle.IndentCaseLabels = true;
   MozillaStyle.ObjCSpaceAfterProperty = true;
+  MozillaStyle.ObjCSpaceBeforeMethodDeclaration = false;
   MozillaStyle.ObjCSpaceBeforeProtocolList = false;
   MozillaStyle.PenaltyReturnTypeOnItsOwnLine = 200;
   MozillaStyle.PointerAlignment = FormatStyle::PAS_Left;
@@ -489,6 +495,7 @@
   Style.NamespaceIndentation = FormatStyle::NI_Inner;
   Style.ObjCBlockIndentWidth = 4;
   Style.ObjCSpaceAfterProperty = true;
+  Style.ObjCSpaceBeforeMethodDeclaration = false;
   Style.PointerAlignment = FormatStyle::PAS_Left;
   Style.Standard = FormatStyle::LS_Cpp03;
   return Style;
Index: lib/Format/TokenAnnotator.cpp
===================================================================
--- lib/Format/TokenAnnotator.cpp	(revision 240315)
+++ lib/Format/TokenAnnotator.cpp	(working copy)
@@ -1920,9 +1920,17 @@
   if (Line.Type == LT_ObjCMethodDecl) {
     if (Left.is(TT_ObjCMethodSpecifier))
       return true;
-    if (Left.is(tok::r_paren) && Right.is(tok::identifier))
-      // Don't space between ')' and <id>
-      return false;
+    if (Left.is(tok::r_paren) && Right.is(tok::identifier)) {
+      int rParenCount = 0; // Only apply to the first method name portion
+      for (FormatToken *previousToken = Right.Previous; previousToken;
+        previousToken = previousToken->Previous) {
+        if (previousToken->is(TT_ObjCMethodSpecifier))
+          break;
+        if (previousToken->is(tok::r_paren))
+          rParenCount++;
+      }
+      return Style.ObjCSpaceBeforeMethodDeclaration && (rParenCount < 2);
+    }
   }
   if (Line.Type == LT_ObjCProperty &&
       (Right.is(tok::equal) || Left.is(tok::equal)))
Index: lib/Format/UnwrappedLineParser.cpp
===================================================================
--- lib/Format/UnwrappedLineParser.cpp	(revision 240315)
+++ lib/Format/UnwrappedLineParser.cpp	(working copy)
@@ -1231,7 +1231,7 @@
     --Line->Level;
   }
   if (FormatTok->Tok.is(tok::kw_else)) {
-    if (Style.BreakBeforeBraces == FormatStyle::BS_Stroustrup)
+    if (Style.BreakBeforeBraces == FormatStyle::BS_Stroustrup || Style.BreakBeforeElse)
       addUnwrappedLine();
     nextToken();
     if (FormatTok->Tok.is(tok::l_brace)) {
Index: unittests/Format/FormatTest.cpp
===================================================================
--- unittests/Format/FormatTest.cpp	(revision 240315)
+++ unittests/Format/FormatTest.cpp	(working copy)
@@ -9022,6 +9022,7 @@
   CHECK_PARSE_BOOL(AlwaysBreakTemplateDeclarations);
   CHECK_PARSE_BOOL(BinPackParameters);
   CHECK_PARSE_BOOL(BinPackArguments);
+  CHECK_PARSE_BOOL(BreakBeforeElse);
   CHECK_PARSE_BOOL(BreakBeforeTernaryOperators);
   CHECK_PARSE_BOOL(BreakConstructorInitializersBeforeComma);
   CHECK_PARSE_BOOL(ConstructorInitializerAllOnOneLineOrOnePerLine);
@@ -9031,6 +9032,7 @@
   CHECK_PARSE_BOOL(IndentWrappedFunctionNames);
   CHECK_PARSE_BOOL(KeepEmptyLinesAtTheStartOfBlocks);
   CHECK_PARSE_BOOL(ObjCSpaceAfterProperty);
+  CHECK_PARSE_BOOL(ObjCSpaceBeforeMethodDeclaration);
   CHECK_PARSE_BOOL(ObjCSpaceBeforeProtocolList);
   CHECK_PARSE_BOOL(Cpp11BracedListStyle);
   CHECK_PARSE_BOOL(SpacesInParentheses);
